package gui;
import java.awt.BorderLayout;

import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.Box;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;

import java.awt.Color;
import java.awt.event.ActionListener;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.awt.event.ActionEvent;

public class ChatSettings extends javax.swing.JDialog {
	
	private JTextField fieldPkdServerIP;
	private JTextField fieldPkdServerPort;
	private JTextField fieldPortToListen;
	
	static private Color normalColor = new Color(255,255,255);
	static private Color alertColor = new Color(255,200,200);
	
	public String _pkdIP;
	public int _pkdPort = -1;
	public int _listenPort = -1;
	
	public ChatSettings() {
		getContentPane().setBackground(new Color(240, 255, 240));
		
		initComponents();
		
		try {
			String ip = InetAddress.getLocalHost().getHostAddress();
			fieldPkdServerIP.setText(ip);
			
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	}
	
	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	protected void initComponents() {
    	
    	setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		
		JLabel lblPkdServerIp = new JLabel("PKD Server IP");
		
		JLabel lblPkdServerPort = new JLabel("PKD Server Port");
		
		fieldPkdServerIP = new JTextField();
		fieldPkdServerIP.setColumns(10);
		
		fieldPkdServerPort = new JTextField();
		fieldPkdServerPort.setColumns(10);
		
		JLabel lblListenPort = new JLabel("Port to Listen");
		
		fieldPortToListen = new JTextField();
		fieldPortToListen.setColumns(10);
		
		JButton btnStart = new JButton("Start");
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				startPressed(e);
			}
		});
		
		GroupLayout groupLayout = new GroupLayout(getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(groupLayout.createSequentialGroup()
					.addContainerGap(104, Short.MAX_VALUE)
					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
						.addGroup(Alignment.TRAILING, groupLayout.createSequentialGroup()
							.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
								.addComponent(lblPkdServerIp, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblPkdServerPort)
								.addComponent(lblListenPort))
							.addGap(29)
							.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
								.addComponent(fieldPortToListen, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(fieldPkdServerPort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(fieldPkdServerIP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
							.addGap(91))
						.addGroup(Alignment.TRAILING, groupLayout.createSequentialGroup()
							.addComponent(btnStart, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE)
							.addGap(168))))
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(groupLayout.createSequentialGroup()
					.addGap(38)
					.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblPkdServerIp)
						.addComponent(fieldPkdServerIP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblPkdServerPort)
						.addComponent(fieldPkdServerPort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(18)
					.addGroup(groupLayout.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblListenPort)
						.addComponent(fieldPortToListen, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(18)
					.addComponent(btnStart)
					.addContainerGap(52, Short.MAX_VALUE))
		);
		getContentPane().setLayout(groupLayout);
		
		pack();
	}
	
	public void startPressed(ActionEvent e) {
	
		boolean inputsValid = true;
		_pkdIP = fieldPkdServerIP.getText();
		if(_pkdIP.length() < 1) {
			inputsValid = false;
			fieldPkdServerIP.setBackground(alertColor);
		} else {
			fieldPkdServerIP.setBackground(normalColor);
		}
		
		String pkdPortStr = fieldPkdServerPort.getText();
		if(pkdPortStr.length() < 1) {
			inputsValid = false;
			fieldPkdServerPort.setBackground(alertColor);
		} else {
			_pkdPort = Integer.parseInt(pkdPortStr);
			fieldPkdServerPort.setBackground(normalColor);
		}
		
		String listenPortStr = fieldPortToListen.getText();
		if(listenPortStr.length() < 1) {
			inputsValid = false;
			fieldPortToListen.setBackground(alertColor);
		} else {
			_listenPort = Integer.parseInt(listenPortStr);
			fieldPortToListen.setBackground(normalColor);
		}
		
		if(inputsValid) {
			java.awt.EventQueue.invokeLater(new Runnable() {
	            public void run() {
	          
	            	new ChatDialog(_pkdIP,_pkdPort,_listenPort).setVisible(true);	
	            }
	        });
			setVisible(false);
		}
	}
}
