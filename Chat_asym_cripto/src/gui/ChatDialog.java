package gui;

import java.util.*;
import java.awt.ComponentOrientation;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.*;
import java.security.spec.*;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JList;

import java.awt.Color;

import javax.swing.UIManager;
import javax.swing.border.LineBorder;

import gui.WritableGUI;
import pkd.Database;
import pkd.Decryptor;
import pkd.Encryptor;
import pkd.Keys;
import pkd.Message;
import pkd.Utilities;
import network.PkdClient;
import network.PkdChat;

import javax.swing.JButton;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;


public class ChatDialog extends javax.swing.JFrame implements WritableGUI {
	
	protected PkdChat _chat = null;
	protected Thread  _chatTh = null;
	protected int    _portToListen = -1;
	protected String _pkdServerIP = null;
	protected int    _pkdServerPort = -1;

    private javax.swing.JTextArea chat;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField message;
    private javax.swing.JButton sendButton;
    private javax.swing.JList userList;
    private javax.swing.DefaultListModel<String> userListModel;
    private JButton hack;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates new form MainScreen
     * @throws NoSuchPaddingException 
     * @throws InvalidKeySpecException 
     * @throws NoSuchAlgorithmException 
     * @throws InvalidKeyException 
     */
    public ChatDialog(String pkdServerIP, int pkdServerPort, int portToListen)  {
    	
        initComponents();
        
        _pkdServerIP = pkdServerIP;
		_pkdServerPort = pkdServerPort;
		_portToListen = portToListen;
		
		try {
			String ip = InetAddress.getLocalHost().getHostAddress();
			this.setTitle(ip + ":" + Integer.toString(portToListen));
			
		} catch (UnknownHostException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} 
		
        
        try {
			_chat = new PkdChat(this, portToListen, pkdServerIP, pkdServerPort);
			_chatTh = new Thread(_chat);
			_chatTh.start();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({ "unchecked", "deprecation" })
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	
    	getContentPane().setBackground(new Color(240, 255, 240));
    	
        jScrollPane1 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();
        message = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        sendButton.setForeground(new Color(107, 142, 35));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        chat.setColumns(50);
        chat.setRows(5);
        jScrollPane1.setRowHeaderView(chat);

        
        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
				sendButtonPressed(evt);
            }
        });
        userListModel = new javax.swing.DefaultListModel();
        userList = new javax.swing.JList(userListModel);
        userList.setLayoutOrientation(JList.VERTICAL);
        userList.setBorder(new LineBorder(new Color(0, 0, 0)));
        userList.setBackground(new Color(248, 248, 255));
        
        JButton reload = new JButton("Reset key");
        reload.addActionListener(new ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		reloadButtonPressed(evt);
        	}
        });
        reload.setForeground(Color.BLUE);
        
        hack = new JButton("Hack");
        hack.setForeground(Color.RED);
        hack.addActionListener(new ActionListener() {
        	public void actionPerformed(java.awt.event.ActionEvent evt) {
        		hackButtonPressed(evt);
        	}
        });
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        					.addGap(6)
        					.addComponent(reload, GroupLayout.PREFERRED_SIZE, 94, Short.MAX_VALUE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(hack, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE)
        					.addGap(6))
        				.addComponent(userList, GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(message)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(sendButton))
        				.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 408, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
        				.addComponent(userList, GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(sendButton)
        				.addComponent(message, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(hack)
        				.addComponent(reload))
        			.addGap(15))
        );
        
        getContentPane().setLayout(layout);

        
        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    private void sendButtonPressed(java.awt.event.ActionEvent event) {
        	
    	String msg = message.getText();
    	
    	int index = userList.getSelectedIndex();
    	if(index > -1 && msg.length() > 0)
    	{
    		message.setText("");
    		try {
				_chat.sendMessage(index, msg);
				
			} catch (InvalidKeyException | UnknownHostException
					| NoSuchAlgorithmException | IllegalBlockSizeException
					| BadPaddingException | NoSuchPaddingException
					| InvalidKeySpecException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    }

    public void reloadButtonPressed(ActionEvent event) {
    	
    	try {
			_chat.resetKeys();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
    
    public void hackButtonPressed(ActionEvent event) {
    	
    	int index = userList.getSelectedIndex();
    	if(index > -1)
    	{
	    	try {
				_chat.attack(index);
				
			} catch (Exception e) {
				e.printStackTrace();
			}
    	}
	}

	@Override
    public void write(String s) {
        chat.append(s + System.lineSeparator());
    }
	
	public void clearList() {
		
		userListModel.clear();
	}

	public void addToList(String ip, int port) {

		userListModel.addElement(ip + ":" + Integer.toString(port));
		userList.setSelectedIndex(0);
	}
}
